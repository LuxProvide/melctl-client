{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MelCtl - Client","text":"<p>MelCtl client documentation.</p>"},{"location":"#quick-start","title":"Quick start","text":"<ul> <li>Install and upgrade MelCtl</li> <li>Configure MelCtl</li> </ul>"},{"location":"commands-public/","title":"Commands reference","text":""},{"location":"commands-public/#builtins","title":"Builtins","text":"Command Action Description Documentation <code>ping</code> - Ping the MelCtl API server Link <code>login</code> <code>user</code> Login / get an user token Link <code>login</code> <code>info</code> Get login / token information Link <code>config</code> <code>show</code> Show the client configuration Link <code>config</code> <code>init</code> Initialize a new default configuration Link <code>complete</code> <code>bash</code> Generate the Bash autocompletion script Link <code>complete</code> <code>zsh</code> Generate the ZSH autocompletion script Link <code>version</code> - Print MelCtl client and server version Link"},{"location":"commands-public/#customer","title":"Customer","text":"Command Action Description Documentation <code>s3</code> <code>login</code> Login to LuxProvide S3 gateway Link <code>s3</code> <code>logout</code> Logout from LuxProvide S3 gateway Link <code>s3</code> <code>info</code> Get S3 account information Link <code>s3</code> <code>ls</code> List S3 buckets and bucket's contents Link <code>s3</code> <code>mb</code> Create S3 bucket Link <code>s3</code> <code>rb</code> Delete S3 bucket Link <code>s3</code> <code>del</code> Delete S3 bucket content Link <code>s3</code> <code>cp</code> Copy data from/to bucket Link <code>s3</code> <code>genconf</code> Generate other S3 clients configuration Link <code>s8s</code> <code>set-config</code> Add a newS8S configuration Link <code>s8s</code> <code>get-config</code> List S8S configuration(s) Link <code>s8s</code> <code>del-config</code> Remove an S8S configuration Link <code>s8s</code> <code>list-regions</code> List S8S regions Link <code>s8s</code> <code>list-pools</code> List S8S pools Link <code>s8s</code> <code>get-pool</code> Get information about an S8S pool Link <code>s8s</code> <code>status</code> Get information about an S8S allocation Link <code>s8s</code> <code>resources</code> List available resources Link <code>s8s</code> <code>scale</code> Scale a cluster Link"},{"location":"commands/","title":"Commands reference","text":""},{"location":"commands/#builtins","title":"Builtins","text":"Command Action Description Documentation <code>ping</code> - Ping the MelCtl API server Link <code>login</code> <code>user</code> Login / get an user token Link <code>login</code> <code>info</code> Get login / token information Link <code>config</code> <code>show</code> Show the client configuration Link <code>config</code> <code>init</code> Initialize a new default configuration Link <code>complete</code> <code>bash</code> Generate the Bash autocompletion script Link <code>complete</code> <code>zsh</code> Generate the ZSH autocompletion script Link <code>version</code> - Print MelCtl client and server version Link"},{"location":"commands/#customer","title":"Customer","text":"Command Action Description Documentation <code>s3</code> <code>login</code> Login to LuxProvide S3 gateway Link <code>s3</code> <code>logout</code> Logout from LuxProvide S3 gateway Link <code>s3</code> <code>info</code> Get S3 account information Link <code>s3</code> <code>ls</code> List S3 buckets and bucket's contents Link <code>s3</code> <code>mb</code> Create S3 bucket Link <code>s3</code> <code>rb</code> Delete S3 bucket Link <code>s3</code> <code>del</code> Delete S3 bucket content Link <code>s3</code> <code>cp</code> Copy data from/to bucket Link <code>s3</code> <code>genconf</code> Generate other S3 clients configuration Link <code>s8s</code> <code>set-config</code> Add a newS8S configuration Link <code>s8s</code> <code>get-config</code> List S8S configuration(s) Link <code>s8s</code> <code>del-config</code> Remove an S8S configuration Link <code>s8s</code> <code>list-regions</code> List S8S regions Link <code>s8s</code> <code>list-pools</code> List S8S pools Link <code>s8s</code> <code>get-pool</code> Get information about an S8S pool Link <code>s8s</code> <code>status</code> Get information about an S8S allocation Link <code>s8s</code> <code>resources</code> List available resources Link <code>s8s</code> <code>scale</code> Scale a cluster Link"},{"location":"commands/#admin","title":"Admin","text":"Command Action Description Documentation <code>admin</code> <code>login</code> Generate a valid token for any user Link <code>curl</code> - Performs low-level API call Link <code>projects</code> <code>list</code> List all projects Link <code>projects</code> <code>get</code> Get one or more project information Link <code>projects</code> <code>create</code> Create a project Link <code>projects</code> <code>report</code> Reports one or all projects usage Link <code>projects</code> <code>add-user</code> Add users to a project Link <code>projects</code> <code>add-coord</code> Add coordinators to a project Link <code>projects</code> <code>del-user</code> Remove users from a project Link <code>projects</code> <code>del-coord</code> Remove coordinators from a project Link <code>projects</code> <code>add-sharedfs</code> Add a shared fs tier to a project Link <code>projects</code> <code>del-sharedfs</code> Remove a shared fs from a project Link <code>projects</code> <code>set-quotas</code> Set a project quotas Link <code>s3ds</code> <code>list</code> List S3 access keys Link <code>s3ds</code> <code>setup</code> Create and configure S3 accesses keys Link <code>s3ds</code> <code>disable</code> Disable S3 accesses keys Link <code>tasks</code> <code>list</code> List available tasks Link <code>tasks</code> <code>queued</code> List queued and running tasks Link <code>tasks</code> <code>status</code> Get a task status Link <code>tasks</code> <code>get</code> Get a task result Link <code>tasks</code> <code>submit</code> Runs a new task Link <code>users</code> <code>list</code> List users Link <code>users</code> <code>get</code> Get a specific user Link <code>users</code> <code>create</code> Create an user Link <code>users</code> <code>s3-status</code> Get an user S3 access Link <code>users</code> <code>s3-setup</code> Setup an user S3 access Link"},{"location":"config/","title":"Configuration","text":"<p>The <code>melctl</code> client can be configured via command line arguments and via a configuration file.</p>"},{"location":"config/#initial-configuration","title":"Initial configuration","text":"<p>After the first installation, run <code>melctl config init</code> to initialize the configuration file:</p> <pre><code>melctl config init\n</code></pre> <p>Internal users</p> <p>Internal users should change the MelCTL server URL to point to the internal production instance.</p> <p>Edit the environment file <code>melctl-cli.env</code> (you may find the full path using <code>melctl config show</code>) and change the URL parameter (<code>url=\"https://melctl...\"</code>) to the appropriate value.</p>"},{"location":"config/#configurable-items","title":"Configurable items","text":"Argument Config key Description <code>-a</code>, <code>--auth</code> <code>auth_token</code> API server authentication token <code>-u</code>, <code>--url</code> <code>url</code> API server URL"},{"location":"config/#configuration-sources","title":"Configuration sources","text":"<p>MelCTL client has two configuration sources:</p> <ul> <li>The configuration file (stores configuration variables)</li> <li>The secrets directory (stores tokens)</li> </ul> <p>You can generate the configuration assets using <code>melctl config init</code>. See plugins/builtins/config</p> <p>If no configuration is found, <code>melctl</code> will complain when invoked.</p>"},{"location":"config/#configuration-file","title":"Configuration file","text":"<p>The configuration file is located from:</p> <ul> <li>1 - Environment variable <code>MELCTL_CLI_CONFIG</code></li> <li>2 - File <code>~/.melctl-cli.env</code></li> </ul> <p>The following configuration attributes are supported:</p> Attribute Type Default Description <code>url</code> <code>string</code> <code>https://melctl.lxp-prod.cloud.lxp.lu</code> MelCtl API server URL <code>public_releases_api</code> <code>string</code> <code>'https://api.github.com/repos/LuxProvide/melctl-client/releases/latest'</code> Public release URL <code>public_releases_timeout</code> <code>int</code> <code>0.5</code> Public update check timeout <code>public_releases_freq</code> <code>int</code> <code>60</code> Public update check frequency"},{"location":"config/#secrets","title":"Secrets","text":"<p>The secrets directory is located from:</p> <ul> <li>1 - Environment variable <code>MELCTL_CLI_SECRETS</code></li> <li>2 - Directory <code>~/.melctl-secrets</code></li> </ul>"},{"location":"installation/","title":"Installation & upgrade","text":""},{"location":"installation/#installation-and-upgrade","title":"Installation and upgrade","text":"<p>MelCtl and its plugins may be installed and upgraded either from their Python packages using <code>pip</code> or from source.</p>"},{"location":"installation/#notes","title":"Notes","text":"<ul> <li>MelCtl and its plugins may optionally be installed in a virtual environment:<ul> <li>Create a virtual environment: <code>python3 -m venv &lt;venv name&gt;</code></li> <li>Activate the virtual environment: <code>source &lt;venv path&gt;/bin/activate</code></li> </ul> </li> <li>If you are frequently updating MelCtl, you may install it in editable mode (<code>pip install -e ...</code>)</li> </ul>"},{"location":"installation/#luxprovide-customers","title":"LuxProvide customers","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or newer</li> <li>Python's <code>pip</code></li> <li>Git client (when installing or upgrading from source)</li> </ul>"},{"location":"installation/#installation-from-the-python-package","title":"Installation from the Python package","text":"<p>Install <code>melctl-client</code> and the plugins:</p> <pre><code>pip3 install melctl-client melctl-client-plugins-customer\n</code></pre> <p>Upgrade <code>melctl-client</code> and the plugins:</p> <pre><code>pip3 install --upgrade melctl-client melctl-client-plugins-customer\n</code></pre>"},{"location":"installation/#installation-from-source","title":"Installation from source","text":"<p>Clone the public repositories:</p> <pre><code>git clone https://github.com/LuxProvide/melctl-client\ngit clone https://github.com/LuxProvide/melctl-client-plugins-customer\n</code></pre> <p>Install <code>melctl-client</code> and the plugins:</p> <pre><code>pip3 install ./melctl-client ./melctl-client-plugins-customer\n</code></pre>"},{"location":"installation/#upgrade-from-source","title":"Upgrade from source","text":"<p>Update <code>melctl-client</code> and the sources of the plugins:</p> <pre><code>git pull melctl-client\ngit pull melctl-client-plugins-customer\n</code></pre> <p>Upgrade <code>melctl-client</code> and the plugins:</p> <pre><code>pip3 install --upgrade ./melctl-client ./melctl-client-plugins-customer\n</code></pre>"},{"location":"installation/#internal-users","title":"Internal users","text":""},{"location":"installation/#requirements_1","title":"Requirements","text":"<ul> <li>Python 3.8 or newer</li> <li>Python's <code>pip</code></li> <li>Git client (when installing or upgrading from source)</li> <li>GitLab PAT (Personal Access Token), further referred as <code>&lt;PAT&gt;</code>     In the next examples:<ul> <li>Replace <code>&lt;PAT&gt;</code> with your GitLab PAT (i.e. <code>glpat-a1b2c3d4...</code>)</li> <li>Do not replace <code>__token__</code></li> </ul> </li> </ul>"},{"location":"installation/#installation-from-the-python-package_1","title":"Installation from the Python package","text":"<p>Install <code>melctl-client</code>:</p> <pre><code>pip3 install --index-url https://__token__:&lt;PAT&gt;@gitlab.lxp.lu/api/v4/projects/179/packages/pypi/simple melctl-client\n</code></pre> <p>Install the admin plugins:</p> <pre><code>pip3 install --index-url https://__token__:&lt;PAT&gt;@gitlab.lxp.lu/api/v4/projects/179/packages/pypi/simple melctl-client-plugins-admin\n</code></pre> <p>Install the customer plugins:</p> <pre><code>pip3 install --index-url https://__token__:&lt;PAT&gt;@gitlab.lxp.lu/api/v4/projects/179/packages/pypi/simple melctl-client-plugins-customer\n</code></pre>"},{"location":"installation/#installation-from-source_1","title":"Installation from source","text":"<p>Clone the internal repositories:</p> <pre><code>git clone ssh://git@gitlab.lxp.lu:8822/lxp-hpc/IaC/meluxina/melctl-client\ngit clone ssh://git@gitlab.lxp.lu:8822/lxp-hpc/IaC/meluxina/melctl-client-plugins/admin melctl-client-plugins-admin\ngit clone ssh://git@gitlab.lxp.lu:8822/lxp-hpc/IaC/meluxina/melctl-client-plugins/customer melctl-client-plugins-customer\n</code></pre> <p>Install <code>melctl-client</code> and the plugins:</p> <pre><code>pip3 install ./melctl-client ./melctl-client-plugins-admin ./melctl-client-plugins-customer\n</code></pre>"},{"location":"installation/#upgrade-from-source_1","title":"Upgrade from source","text":"<p>Update <code>melctl-client</code> and the sources of the plugins:</p> <pre><code>git -C melctl-client pull\ngit -C melctl-client-plugins-admin pull\ngit -C melctl-client-plugins-customer pull\n</code></pre> <p>Upgrade <code>melctl-client</code> and the plugins:</p> <pre><code>pip3 install --upgrade ./melctl-client ./melctl-client-plugins-admin ./melctl-client-plugins-customer\n</code></pre>"},{"location":"usage/","title":"Overview","text":""},{"location":"usage/#usage","title":"Usage","text":""},{"location":"usage/#general-syntax","title":"General syntax","text":"<pre><code>melctl &lt;command&gt; [action] [arguments]\n</code></pre> <p>Where:</p> <ul> <li><code>command</code> refers to the API endpoint you're accessing, e.g, <code>projects</code><ul> <li>Each plugin may implement one or more <code>command</code></li> </ul> </li> <li><code>action</code> refers to the action to perform (not every <code>command</code> has actions)</li> <li><code>arguments</code> refers to the command's or command's action's argument</li> </ul>"},{"location":"usage/#commands-syntax","title":"Commands syntax","text":"<p>Get the list of available commands:</p> <pre><code>melctl -h\n</code></pre> <p>Get the list of a command's actions (if any):</p> <pre><code>melctl &lt;command&gt; -h\n</code></pre> <p>Get the list of a command's actions arguments (if any):</p> <pre><code>melctl &lt;command&gt; &lt;action&gt; -h\n</code></pre>"},{"location":"usage/#common-arguments","title":"Common arguments","text":"<p>Some arguments are common to most commands and command's actions:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show the endpoint or endpoint's action help</li> <li><code>-a AUTH</code>, <code>--auth AUTH</code>: Select the authentication token (e.g. <code>Bearer &lt;JWT&gt;</code>)</li> <li><code>-u URL</code>, <code>--url URL</code>: Select the API server base URL (e.g. <code>http://host.tld:port</code>)</li> <li><code>-v VERSION</code>, <code>--version VERSION</code>: Select the API endpoint version (e.g. <code>v1</code>)</li> <li><code>-o FORMAT</code>, <code>--output-format FORMAT</code>: Select the command output format<ul> <li><code>table</code>: Format output as table</li> <li><code>wide</code>: Format output as table with all available fields</li> <li><code>json</code>: Format output as JSON document</li> <li><code>yaml</code>: Format output as YAML document</li> </ul> </li> </ul>"},{"location":"usage/#jq-scripting","title":"JQ scripting","text":"<p><code>jq</code> parses and filters JSON documents. MelCtl can be piped into <code>jq</code>:</p> <pre><code>melctl &lt;command&gt; [action] [arguments] --nocolor -o json 2&gt;/dev/null | jq &lt;script&gt;\n</code></pre> <p>Where:</p> <ul> <li><code>--nocolor</code> disable MelCtl colored output</li> <li><code>-o json</code> renders MelCtl output as JSON</li> <li><code>script</code> is the JQ script to apply</li> </ul>"},{"location":"usage/#render-output-using-jq","title":"Render output using JQ","text":"<pre><code>melctl users list --nocolor -o json 2&gt;/dev/null | jq </code></pre>"},{"location":"usage/#using-jq-on-a-list-of-objects","title":"Using JQ on a list of objects","text":"<p>If MelCtl JSON output is a list of objects like:</p> <pre><code>[\n{\n\"name\": \"jpclipffel\",\n\"uid\": 15019,\n\"s3ds\": {\n\"tag\": \"jpclipffel\",\n\"fspaths\": \"/mnt/tier2/users/jpclipffel\"\n}\n},\n{\n\"name\": \"foo\",\n\"uid\": 12345,\n\"s3ds\": {}\n},\n// ...\n]\n</code></pre> <p>Use filters like this:</p> <pre><code># Select all objects name\n... | jq '.[].name'\n\n# Filer empty values\n... | jq '.[] | select(.email != null) | select(.email | match(\"jpclipffel\"))'\n\n# Select all objects with S3DS content\n... | jq '.[] | select((.s3ds | length) &gt; 0)'\n</code></pre>"},{"location":"development/commands/","title":"Commands","text":""},{"location":"development/commands/#commands","title":"Commands","text":"<p>To do.</p>"},{"location":"development/plugins/","title":"Plugins","text":""},{"location":"development/plugins/#plugins","title":"Plugins","text":""},{"location":"development/plugins/#plugin-structure","title":"Plugin structure","text":"<p>Example with a plugin called <code>foobar</code>:</p> <pre><code>.\n\u251c\u2500\u2500 melctl_client_plugins\n\u2502   \u2514\u2500\u2500 foobar\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 foo.py\n\u2502       \u2514\u2500\u2500 bar.py\n\u2514\u2500\u2500 setup.py\n</code></pre> <p>Where:</p> <ul> <li><code>.</code> is the plugin root project / repository</li> <li><code>melctl_client_plugins</code> is the namespace package which contains the plugin code</li> <li><code>foobar</code> is the plugin source directory</li> <li><code>__init__.py</code> exposes the plugin commands</li> <li><code>foo.py</code> and <code>bar.py</code> implements the plugin commands</li> <li><code>setup.py</code> is the plugin installation script</li> </ul>"},{"location":"development/plugins/#installation-script-setuppy","title":"Installation script -  <code>setup.py</code>","text":"<p>Example:</p> <pre><code>from setuptools import setup, find_namespace_packages\n\n\nsetup(\n    name='melctl_client_plugins_foobar',\n    packages=find_namespace_packages(include=['melctl_client_plugins.*']),\n    install_requires=[\n        'melctl_client',\n    ]\n)\n</code></pre>"},{"location":"development/plugins/#commands-implementation","title":"Commands implementation","text":"<p>See commands.md</p>"},{"location":"plugins/","title":"Plugins","text":"<p>MelCtl plugins implement client commands and typically interface with one or more API server endpoints.</p> Plugin Description Repositories <code>builtins</code> Built-in plugin - <code>customer</code> Customer commands Public / Internal <code>admin</code> Administrative commands Internal"},{"location":"plugins/index-public/","title":"Plugins","text":"<p>MelCtl plugins implement client commands and typically interface with one or more API server endpoints.</p> Plugin Description Repositories <code>builtins</code> Built-in plugin - <code>customer</code> Customer commands Link"},{"location":"plugins/admin/admin/","title":"Admin","text":"<p>Purely administrative commands.</p>"},{"location":"plugins/admin/admin/#usage","title":"Usage","text":"<pre><code>melctl admin {login} [arguments]\n</code></pre>"},{"location":"plugins/admin/admin/#login-obtain-any-token","title":"<code>login</code> - Obtain any token","text":"<pre><code>melctl admin login &lt;username&gt; &lt;profile&gt; &lt;validity&gt; &lt;-p|--password &lt;API admin password&gt;&gt;\n</code></pre>"},{"location":"plugins/admin/curl/","title":"Curl","text":"<p>Performs raw HTTP call to MelCtl API.</p>"},{"location":"plugins/admin/curl/#usage","title":"Usage","text":"<pre><code>melctl curl &lt;method&gt; &lt;endpoint&gt;\n</code></pre>"},{"location":"plugins/admin/curl/#examples","title":"Examples","text":""},{"location":"plugins/admin/curl/#ping","title":"Ping","text":"<pre><code>melctl curl get ping\n</code></pre>"},{"location":"plugins/admin/curl/#list-projects","title":"List projects","text":"<pre><code>melctl curl get projects\n</code></pre>"},{"location":"plugins/admin/projects/","title":"Projects","text":"<p>Manage MeluXina projects.</p>"},{"location":"plugins/admin/projects/#usage","title":"Usage","text":"<pre><code>melctl projects {list,get,create,report,add-user,add-coord,del-user,del-coord,add-sharedfs,set-quotas} [arguments]\n</code></pre>"},{"location":"plugins/admin/projects/#list-list-all-projects","title":"<code>list</code> - List all projects","text":"<pre><code>melctl projects list [arguments]\n</code></pre> <p>Example return as table (truncated):</p> <pre><code>name       path\n---------  -----------------------------\nbilltest   root.luxembourg.lxp.billtest\nbilltest2  root.luxembourg.lxp.billtest2\nmelsupp    root.luxembourg.melsupp\n</code></pre> <p>Example return as YAML (truncated):</p> <pre><code>- children: {}\ncoordinators:\n- app-melctl\n- jpclipffel\n- omula\n- ...\nname: melsupp\npath: root.luxembourg.melsupp\nusers:\n- cthomaz\n- ...\n</code></pre>"},{"location":"plugins/admin/projects/#get-get-a-project","title":"<code>get</code> - Get a project","text":"<pre><code>melctl projects get &lt;name&gt; [arguments]\n</code></pre> <ul> <li><code>name</code> is a project name as returned by <code>melctl projects list</code></li> </ul> <p>Example return as table (truncated):</p> <pre><code>name       users                 coordinators         children    path\n---------  --------------------  -------------------  ----------  -----------------------------\nbilltest   ['wmainassara', ...]  ['app-melctl', ...]  {}          root.luxembourg.lxp.billtest\nbilltest2  ['mdenou', ...]       ['app-melctl', ...]  {}          root.luxembourg.lxp.billtest2\n</code></pre> <p>Example return as YAML (truncated):</p> <pre><code>- children: {}\ncoordinators:\n- app-melctl\n- ...\nname: billtest\npath: root.luxembourg.lxp.billtest\nusers:\n- wmainassara\n- vplugaru\n- ...\n- children: {}\ncoordinators:\n- app-melctl\n- jpclipffel\n- ...\nname: billtest2\npath: root.luxembourg.lxp.billtest2\nusers:\n- mdenou\n- ...\n</code></pre>"},{"location":"plugins/admin/projects/#create-create-a-project","title":"<code>create</code> - Create a project","text":"<pre><code>melctl projects create -p,--parent PARENT [[--name NAME] [--uid UID]]\n</code></pre> <p>Example to create a new EuroHPC project (name and UID are automatically generated):</p> <pre><code>melctl projects create -p eurohpc\n</code></pre> <p>Example to create a new Luxembourg project (name and UID are automatically generated):</p> <pre><code>melctl projects create -p luxembourg\n</code></pre> <p>Example to create a custom project with UID/GID <code>200999</code> named <code>lxp200999</code>:</p> <pre><code>melctl projects create -p lxp --uid 200999 --name lxp200999\n</code></pre>"},{"location":"plugins/admin/projects/#report-get-projects-resource-usage","title":"<code>report</code> - Get projects resource usage","text":"<pre><code>melctl projects report [name] \\\n[-r,--rangetime lastmonth] \\\n[-s,--starttime TIME_START] \\\n[-e,--endtime TIME_END] \\\n[--time-unit s,sec,secs,second,seconds,m,min,mins,minute,minutes,h,hrs,hour,hours] \\\n[--all]\n</code></pre> <p>Example query for previous month usage:</p> <pre><code>melctl projects report -r lastmonth --time-unit hours\n</code></pre> <p>Example query for previous month usage, including unused projects:</p> <pre><code>melctl projects report -r lastmonth --all\n</code></pre> <p>Example query for April 2002:</p> <pre><code>melctl projects report -s \"2022-04-01\" -e \"2022-05-01\" --time-unit hours\n</code></pre> <p>Example return as table (truncated):</p> <pre><code>name      disk        cpu      gpu    mem    fpga\n--------  ------  -------  -------  -----  ------\nlxp               3180816  2696785   6444  173387\nbilltest              112        0      0       0\nmelsupp              1905        0      0       0\nnocredit                0        0      0       0\n</code></pre> <p>Example return as YAML (truncated):</p> <pre><code>- cpu: 3180930\nfpga: 173387\ngpu: 2696975\nmem: 6444\nname: lxp\n- cpu: 112\nfpga: 0\ngpu: 0\nmem: 0\nname: billtest\n- cpu: 1905\nfpga: 0\ngpu: 0\nmem: 0\nname: melsupp\n- cpu: 0\nfpga: 0\ngpu: 0\nmem: 0\nname: nocredit\n</code></pre>"},{"location":"plugins/admin/projects/#add-user-add-users-to-a-project","title":"<code>add-user</code> - Add users to a project","text":"<pre><code>melctl projects add-user PROJECT -m USER [USER ...]\n</code></pre> <p>Example to add users <code>u100001</code> and <code>u100002</code> to project <code>p200001</code>:</p> <pre><code>melctl projects add-user p200001 -m u100001 u100002\n</code></pre>"},{"location":"plugins/admin/projects/#add-coord-add-coordinators-to-a-project","title":"<code>add-coord</code> - Add coordinators to a project","text":"<pre><code>melctl projects add-coord PROJECT -m USER [USER ...]\n</code></pre> <p>Example to add coordinators <code>u100001</code> and <code>u100002</code> to project <code>p200001</code>:</p> <pre><code>melctl projects add-coord p200001 -m u100001 u100002\n</code></pre>"},{"location":"plugins/admin/projects/#del-user-remove-users-from-a-project","title":"<code>del-user</code> - Remove users from a project","text":"<pre><code>melctl projects del-user PROJECT -m USER [USER ...]\n</code></pre> <p>Example to remove users <code>u100001</code> and <code>u100002</code> from project <code>p200001</code>:</p> <pre><code>melctl projects del-user p200001 -m u100001 u100002\n</code></pre>"},{"location":"plugins/admin/projects/#del-coord-remove-coordinators-from-a-project","title":"<code>del-coord</code> - Remove coordinators from a project","text":"<pre><code>melctl projects del-coord PROJECT -m USER [USER ...]\n</code></pre> <p>Example to remove coordinators <code>u100001</code> and <code>u100002</code> from project <code>p200001</code>:</p> <pre><code>melctl projects del-coord p200001 -m u100001 u100002\n</code></pre>"},{"location":"plugins/admin/projects/#add-sharedfs-add-shared-file-system-tier-to-a-project","title":"<code>add-sharedfs</code> - Add shared file system tier to a project","text":"<pre><code>melctl projects add-sharedfs PROJECT --tier TIER --owner USER\n</code></pre> <p>Example to add a tier 2 shared filesystem directory owned by user <code>u100001</code> to project <code>p200001</code>:</p> <pre><code>melctl projects add-sharedfs p200001 --tier 2 --owner u100001\n</code></pre>"},{"location":"plugins/admin/projects/#set-quotas-set-a-project-quotas","title":"<code>set-quotas</code> - Set a project quotas","text":"<pre><code>melctl projects set-quotas PROJECT \\\n[--tier TIER --kbytes KBYTES --inodes INODES] \\\n[--cpu MINUTES] \\\n[--gpu MINUTES] \\\n[--mem MINUTES] \\\n[--fpga MINUTES] \\\n</code></pre> <p>Example to set both tier 2 and GPU quotas:</p> <pre><code>melctl projects set-quotas p200001 \\\n--tier 2 --kbytes 1048576000 --inodes 1000000 \\\n--gpu $((3000*60))\n</code></pre> <p>Example to set tier 2 quotas:</p> <pre><code>melctl projects set-quotas p200001 \\\n--tier 2 --kbytes 1048576000 --inodes 1000000\n</code></pre> <p>Example to set CPU and FPGA quotas:</p> <pre><code>melctl projects set-quotas p200001 \\\n--cpu $((1000*60))\n--fpga $((3000*60))\n</code></pre>"},{"location":"plugins/admin/s3ds/","title":"S3DS","text":"<p>Manage S3DS.</p>"},{"location":"plugins/admin/s3ds/#usage","title":"Usage","text":"<pre><code>melctl s3ds {list,setup,disable} [arguments]\n</code></pre>"},{"location":"plugins/admin/s3ds/#list-list-access-keys","title":"<code>list</code> - List access keys","text":"<pre><code>melctl s3ds list [arguments]\n</code></pre> <p>Example return as table (truncated):</p> <pre><code>tag               uuid\n----------------  ----------------------------------------\nscortet           0fcbfcd1a94d151dc82d37aa25d62c7799082458\n(reserved)        74e3cbde7aeaa539b3233e29d25b1d304ca514d0\n(reserved)        43a28c7c67f94b768328a587b218f0e6d17f89fb\njpclipffel        1337c6de830200667ef2c5c16c9959c1c03d2405\nrderooy           3a3e7debbc9be3b4525e8683f0e829399da6017b\nADMIN (reserved)  No UUID for ADMIN\n(reserved)        aecf16047b706024a0505c83e9933df6096000dc\n</code></pre> <p>Example return as YAML (truncated):</p> <pre><code>- accesskey: \"****\"\ncurrent_usage: 0\nenabled: true\nfspaths: /mnt/tier2/users/jpclipffel\nfsuid: 15019:555\nquotalimit: UNLIMITED\nsecretkey: \"****\"\ntag: jpclipffel\nuuid: 1337c6de830200667ef2c5c16c9959c1c03d2405\n</code></pre>"},{"location":"plugins/admin/s3ds/#setup-create-an-access-key","title":"<code>setup</code> - Create an access key","text":"<p>Low-level command</p> <ul> <li>You should really use the <code>users s3-setup</code> command &amp; action to create an user access key</li> <li>See the documentation</li> </ul> <pre><code>melctl s3ds setup &lt;username&gt; --uid &lt;uid&gt; --gid &lt;gid&gt; --paths &lt;path&gt; [path, ...]\n</code></pre> <p>Example return as table:</p> <pre><code>s3ds_status\n---------------------------------------------------\n{'strategy': 'create', 'code': 200, 'reason': 'OK'}\n</code></pre>"},{"location":"plugins/admin/tasks/","title":"Tasks","text":"<p>Run tasks, get their status and their results.</p>"},{"location":"plugins/admin/tasks/#usage","title":"Usage","text":"<pre><code>melctl tasks {list,queued,status,get,submit} [arguments]\n</code></pre>"},{"location":"plugins/admin/tasks/#list-defined-tasks","title":"List defined tasks","text":"<pre><code>melctl tasks list [arguments]\n</code></pre>"},{"location":"plugins/admin/tasks/#list-queued-tasks","title":"List queued tasks","text":"<pre><code>melctl tasks queued [arguments]\n</code></pre>"},{"location":"plugins/admin/tasks/#get-a-task-status","title":"Get a task status","text":"<pre><code>melctl tasks status &lt;task_id&gt; [arguments]\n</code></pre>"},{"location":"plugins/admin/tasks/#get-a-task-result","title":"Get a task result","text":"<pre><code>melctl tasks get &lt;task_id&gt; [arguments]\n</code></pre>"},{"location":"plugins/admin/tasks/#run-a-task","title":"Run a task","text":"<pre><code>melctl tasks submit &lt;name&gt; [--args ARGS...] [--kwargs '{...}'] [arguments]\n</code></pre> <ul> <li><code>name</code> is a task name, as returned by <code>melctl tasks list</code></li> <li><code>--args</code> takes one or more argument<ul> <li>You may prefix an integer or float with <code>int:</code> or <code>float</code>, e.g. <code>--args foo bar int:42</code></li> </ul> </li> <li><code>--kwargs</code> takes a JSON string as sole argument<ul> <li>Arguments type are inferred using standard JSON types</li> <li>Example: <code>--kwargs '{\"name\": \"foo\", \"value\": 42}'</code></li> </ul> </li> </ul>"},{"location":"plugins/admin/tasks/#example-return","title":"Example return","text":"<p>To do.</p>"},{"location":"plugins/admin/users/","title":"Users","text":"<p>Manage MeluXina users.</p>"},{"location":"plugins/admin/users/#usage","title":"Usage","text":"<pre><code>melctl users {list,get,create,s3-status,s3-setup,s3-disable} [arguments]\n</code></pre>"},{"location":"plugins/admin/users/#list-list-all-users","title":"<code>list</code> - List all users","text":"<pre><code>melctl users list [arguments]\n</code></pre> <p>Example return as table (truncated):</p> <pre><code>name                      uid         gid  preserved    expired\n-----------------  ----------  ----------  -----------  ---------\nadmin              1036800000  1036800000  False        False\nahacar                  15015         555  False        False\napp-argocd         1036800072  1036800072  False        False\napp-jupyter        1036800071  1036800071  False        False\napp-melctl         1036800058         555  False        False\njpclipffel              15019         555  False        False\n</code></pre> <p>Example return as YAML (truncated):</p> <pre><code>- expired: false\ngid: 555\ngroups:\n- admins\n- ipausers\n- lxp_ops\n- lxp\n- grp-openstack-admins\n- grp-cgw\n- vpn\n- grp-openstack\n- grp-ipam\n- grp-melctl-admins\n- grp-rundeck-admin\n- grp-argocd-admins\nname: jpclipffel\npreserved: false\ns3ds:\ncurrent_usage: 0\nenabled: true\nfspaths: /mnt/tier2/users/jpclipffel\nfsuid: 15019:555\nquotalimit: UNLIMITED\ntag: jpclipffel\nuuid: 1337c6de830200667ef2c5c16c9959c1c03d2405\nuid: 15019\n</code></pre>"},{"location":"plugins/admin/users/#get-get-a-user-information","title":"<code>get</code> - Get a user information","text":"<pre><code>melctl users get &lt;name|email&gt; [arguments]\n</code></pre> <ul> <li><code>name</code> is a user name (e.g. <code>u100411</code>)</li> <li><code>email</code> is a user email (e.g. <code>foo.bar@lxp.lu</code>)</li> </ul> <p>Example return as table:</p> <pre><code>name          uid    gid  preserved    expired\n----------  -----  -----  -----------  ---------\njpclipffel  15019    555  False        False\n</code></pre> <p>Example return as YAML:</p> <pre><code>- expired: false\ngid: 555\ngroups:\n- grp-rundeck-admin\n- grp-melctl-admins\n- grp-argocd-admins\n- vpn\n- ipausers\n- grp-openstack\n- grp-ipam\n- lxp_ops\n- admins\n- lxp\n- grp-openstack-admins\n- grp-cgw\nname: jpclipffel\npreserved: false\ns3ds:\ncurrent_usage: 0\nenabled: true\nfspaths: /mnt/tier2/users/jpclipffel\nfsuid: 15019:555\nquotalimit: UNLIMITED\ntag: jpclipffel\nuuid: 1337c6de830200667ef2c5c16c9959c1c03d2405\nuid: 15019\n</code></pre>"},{"location":"plugins/admin/users/#create-create-an-user","title":"<code>create</code> - Create an user","text":"<pre><code>melctl users create \\\n--email MAIL --firstname FIRSTNAME --lastname LASTNAME \\\n[--name NAME --uid UID --gid GID] \\\n[--phone PHONE]\n</code></pre> <p>Example to create a customer new user (UID will be generated automatically):</p> <pre><code>melctl users create --email 'john.doe@fbi.gov.us' --firstname 'John' --lastname 'Doe' --phone '+0011223344'\n</code></pre> <p>Example to create a new internal user:</p> <pre><code>melctl users create \\\n--email 'john.doe@fbi.gov.us' --firstname 'John' --lastname 'Doe' \\\n--name 'jdoe' --uid 15000 --gid 555\n</code></pre>"},{"location":"plugins/admin/users/#delete-delete-an-user","title":"<code>delete</code> - Delete an user","text":"<pre><code>melctl users delete &lt;name&gt; [arguments]\n</code></pre> <ul> <li><code>name</code> is a user name (e.g. <code>u100411</code>)</li> </ul> <p>Example return as YAML (truncated):</p> <pre><code>ipa_users_preserve:\nresponse:\nresult:\nsummary: Deleted user \"u100411\"\nvalue:\n- u100411\nversion: 4.9.8\nlustre_homedir_delete:\nmsg:\n- 'INFO: Home directory removal succeeded'\npath: /mnt/tier2/users/u100411\nsuccess: true\nuser: u100411\ns3ds_accesskeys_disable:\ns3ds_status:\ncode: 200\nreason: OK\n</code></pre>"},{"location":"plugins/admin/users/#s3-status-get-an-user-s3-status","title":"<code>s3-status</code> - Get an user S3 status","text":"<pre><code>melctl users s3-status &lt;name&gt; [arguments]\n</code></pre> <ul> <li><code>name</code> is a user name as appearing in the IDM.</li> </ul> <p>Example return as table:</p> <pre><code>tag         uuid                                      fspaths                      fsuid\n----------  ----------------------------------------  ---------------------------  ---------\njpclipffel  1337c6de830200667ef2c5c16c9959c1c03d2405  /mnt/tier2/users/jpclipffel  15019:555\n</code></pre> <p>Example return as YAML:</p> <pre><code>- current_usage: 0\nenabled: true\nfspaths: /mnt/tier2/users/jpclipffel\nfsuid: 15019:555\nquotalimit: UNLIMITED\ntag: jpclipffel\nuuid: 1337c6de830200667ef2c5c16c9959c1c03d2405\n</code></pre>"},{"location":"plugins/admin/users/#s3-setup-set-user-s3-access","title":"<code>s3-setup</code> Set user S3 access","text":"<pre><code>melctl users s3-setup &lt;name&gt; [--paths &lt;path&gt;, ...]\n</code></pre> <ul> <li><code>name</code> is a user name (e.g. <code>u100411</code>)</li> <li><code>path</code> are extra path(s) to allow</li> </ul> <p>Secrets visibility</p> <p>The S3 <code>secretkey</code> and <code>accesskey</code> are displayed only when the access is configured for the first time or when the access is re-enabled.</p> <p>Example return as table:</p> <pre><code>tag         uuid                                      fspaths                      fsuid      secretkey    accesskey\n----------  ----------------------------------------  ---------------------------  ---------  -----------  -----------\njpclipffel  1337c6de830200667ef2c5c16c9959c1c03d2405  /mnt/tier2/users/jpclipffel  15019:555  \n</code></pre> <p>Example return as YAML:</p> <pre><code>- current_usage: 0\nenabled: true\nfspaths: /mnt/tier2/users/jpclipffel\nfsuid: 15019:555\nquotalimit: UNLIMITED\ntag: jpclipffel\nuuid: 1337c6de830200667ef2c5c16c9959c1c03d2405\nsecretkey: null\naccesskey: null\n</code></pre>"},{"location":"plugins/admin/users/#s3-disable-disable-an-user-s3-access","title":"<code>s3-disable</code> - Disable an user S3 access","text":"<pre><code>melctl users s3-disable &lt;name&gt;\n</code></pre> <ul> <li><code>name</code> is a user name (e.g. <code>u100411</code>)</li> </ul>"},{"location":"plugins/builtins/complete/","title":"Complete","text":"<p>Generate a MelCtl client autocompletion script.</p>"},{"location":"plugins/builtins/complete/#usage","title":"Usage","text":"<pre><code>melctl complete {shell}\n</code></pre> <p>Example to generate and load the autocomplete script:</p> <pre><code>source &lt;(melctl complete $(basename ${SHELL}))\n</code></pre>"},{"location":"plugins/builtins/complete/#bash-autocompletion-for-bash","title":"<code>bash</code> - Autocompletion for Bash","text":"<p>Generate and load the autocompletion script for Bash:</p> <pre><code>source &lt;(melctl complete bash)\n</code></pre>"},{"location":"plugins/builtins/complete/#zsh-autocompletion-for-zsh","title":"<code>zsh</code> - Autocompletion for ZSH","text":"<p>Generate and load the autocompletion script for ZSH:</p> <pre><code>source &lt;(melctl complete zsh)\n</code></pre> <p>Alternative:</p> <pre><code>melctl complete zsh | source /dev/stdin\n</code></pre>"},{"location":"plugins/builtins/config/","title":"Config","text":"<p>Show and generate the <code>melctl</code> client configuration.</p>"},{"location":"plugins/builtins/config/#usage","title":"Usage","text":"<pre><code>melctl config {show,init} [common args]\n</code></pre>"},{"location":"plugins/builtins/config/#show-show-current-configuration","title":"<code>show</code> - Show current configuration","text":"<pre><code>melctl config show [common args]\n</code></pre> <pre><code>url                    token    env_file                          secrets_dir\n---------------------  -------  --------------------------------  --------------------------------\nhttp://127.0.0.1:8888  *******  /home/jpclipffel/.melctl-cli.env  /home/jpclipffel/.melctl-secrets\n</code></pre>"},{"location":"plugins/builtins/config/#init-generate-a-new-configuration","title":"<code>init</code> - Generate a new configuration","text":"<pre><code>melctl config init [common args]\n</code></pre> <p>This command will generate:</p> <ul> <li>A new configuration file with default values</li> <li>A new directory to hold MelCtl secrets</li> </ul> <p>The existing configuration is not replaced.</p> <pre><code>path                              status\n--------------------------------  -----------------\n/home/jpclipffel/.melctl-cli.env  File created\n/home/jpclipffel/.melctl-secrets  Directory created\n</code></pre>"},{"location":"plugins/builtins/login/","title":"Login","text":"<p>Login and obtain MelCtl tokens.</p>"},{"location":"plugins/builtins/login/#usage","title":"Usage","text":"<pre><code>melctl login {user|info} [arguments...]\n</code></pre>"},{"location":"plugins/builtins/login/#user-login-as-user","title":"<code>user</code> - Login as user","text":"<p>This lets you obtain a user token, valid for a limited amount of time.</p> <pre><code>melctl login\n</code></pre> <ul> <li>You'll be prompted for your LDAP username and password.</li> <li>The generated token will be stored in your local MelCTL secret directory</li> </ul>"},{"location":"plugins/builtins/login/#info-get-login-status","title":"<code>info</code> - Get login status","text":"<pre><code>melctl login info\n</code></pre> <pre><code>user        profile      valid_until  valid_until_text\n----------  ---------  -------------  -------------------\njpclipffel  admin        1656750312   2022-07-02 10:25:12\n</code></pre>"},{"location":"plugins/builtins/ping/","title":"Ping","text":"<p>Ping the MelCtl API server.</p>"},{"location":"plugins/builtins/ping/#usage","title":"Usage","text":"<pre><code>melctl ping [common args] [-s,--seconds SECONDS]\n</code></pre> Argument Required Default Description <code>-s</code>, <code>--seconds</code> No <code>0</code> Background task time to completion"},{"location":"plugins/builtins/ping/#example-return","title":"Example return","text":"<p>Table:</p> <pre><code>ping    apiVersion    serverVersion    taskId\n------  ------------  ---------------  ------------------------------------\npong    v2            0.0.1            348bfa4f-30af-4e69-b020-cd23a41d2e15\n</code></pre> <p>YAML:</p> <pre><code>apiVersion: v2\nping: pong\nserverVersion: 0.0.1\ntaskId: 83460b10-9806-4b3d-ac3c-4739873abca7\n</code></pre>"},{"location":"plugins/builtins/version/","title":"Version","text":"<p>Return MelCtl client and server versions.</p>"},{"location":"plugins/builtins/version/#usage","title":"Usage","text":"<pre><code>melctl version\n</code></pre>"},{"location":"plugins/builtins/version/#example-return","title":"Example return","text":"<p>Table:</p> <pre><code>serverVersion    serverVersionName    clientVersion    info\n---------------  -------------------  ---------------  ------\n5.0.1            Pedantic Santa       5.0.0            OK\n</code></pre> <p>YAML:</p> <pre><code>clientVersion: 5.0.0\ninfo: OK\nserverVersion: 5.0.1\nserverVersionName: Pedantic Santa\n</code></pre>"},{"location":"plugins/customer/s3/","title":"S3","text":"<p>Interacts with LuxProvide's S3 gateway.</p> <p>Specialized tool</p> <p>MelCtl's <code>s3</code> plugin is meant to interact with LuxProvide's S3 gateway.</p> <p>Although the plugin should works with other S3 server implementation, some of its functionalities are specific to LuxProvide S3 gateway.</p>"},{"location":"plugins/customer/s3/#usage","title":"Usage","text":"<pre><code>melctl s3 {login,logout,info,ls,mb,rb,del,cp,genconf} [arguments]\n</code></pre>"},{"location":"plugins/customer/s3/#login-login-to-s3","title":"<code>login</code> - Login to S3","text":"<pre><code>melctl s3 login [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>access_key                                      secret_key\n----------------------------------------------  ----------------------------------------------\n/home/jpclipffel/.melctl-secrets/s3_access_key  /home/jpclipffel/.melctl-secrets/s3_secret_key\n</code></pre>"},{"location":"plugins/customer/s3/#logout-logout-from-s3","title":"<code>logout</code> - Logout from S3","text":"<pre><code>melctl s3 logout [arguments]\n</code></pre>"},{"location":"plugins/customer/s3/#info-get-s3-account-information","title":"<code>info</code> - Get S3 account information","text":"<pre><code>melctl s3 info [arguments]\n</code></pre> <p>Example return as YAML (truncated):</p> <pre><code>accesskey: \"*****\"\ncurrent_usage: 0\nemail: null\nenabled: true\nfs_gid: 1234\nfs_paths:\n- \"*****\"\nfs_uid: 1234\nsecretkey: \"*****\"\ntag: jpclipffel\nuser: jpclipffel\nuuid: \"*****\"\n</code></pre>"},{"location":"plugins/customer/s3/#ls-list-buckets-and-files","title":"<code>ls</code> - List bucket(s) and files","text":"<pre><code>melctl s3 ls s3://&lt;bucket&gt; [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>Name                  CreationDate\n--------------------  -------------------\njpclipffel            2022-08-26 07:05:48\njpclipffel-downloads  2023-02-01 12:11:23\n</code></pre>"},{"location":"plugins/customer/s3/#mb-create-bucket","title":"<code>mb</code> - Create bucket","text":"<pre><code>melctl s3 mb --path &lt;path&gt; --name &lt;name&gt; [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>BucketName            BucketPath\n--------------------  ------------------------\njpclipffel-downloads  .../jpclipffel/Downloads\n</code></pre> <p>Buckets name</p> <p>Bucket name should always be prefixed with your project ID (e.g. <code>p001234</code>) or user name (e.g. <code>u001234</code>).</p> <p>MelCtl's <code>s3</code> plugin will add your user name as a prefix by default if you do not provide any valid prefix.</p>"},{"location":"plugins/customer/s3/#rb-delete-bucket","title":"<code>rb</code> - Delete bucket","text":"<pre><code>melctl s3 rb &lt;name&gt; [-r,--recursive] [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>  DeletedCount    ErrorsCount\n--------------  -------------\n            83              0\n</code></pre>"},{"location":"plugins/customer/s3/#del-delete-files","title":"<code>del</code> - Delete files","text":"<pre><code>melctl s3 del s3://&lt;bucket&gt;/&lt;path&gt; [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>  DeletedCount    ErrorsCount\n--------------  -------------\n            83              0\n</code></pre>"},{"location":"plugins/customer/s3/#cp-copy-data-fromto-bucket","title":"<code>cp</code> - Copy data from/to bucket","text":"<pre><code>melctl s3 cp &lt;local path&gt; s3://&lt;bucket&gt;/[path] [arguments]\n</code></pre> <pre><code>melctl s3 cp s3://&lt;bucket&gt;/[path] &lt;local path&gt; [arguments]\n</code></pre>"},{"location":"plugins/customer/s3/#reindex-refresh-bucket-objects","title":"<code>reindex</code> - Refresh bucket objects","text":"<pre><code>melctl s3 reindex s3://&lt;bucket&gt; [--[no-]write] [--[no-]update] [--[no]-delete]\n</code></pre> <p>Specialized tool</p> <p>The <code>reindex</code> command is specific to LuxProvide gateway.</p> <p>As our S3 buckets are abstractions over our file-systems directories, this command is required to refresh the bucket objects when the files are changed directly (i.e. no through S3).</p>"},{"location":"plugins/customer/s3/#genconf-generate-configuration","title":"<code>genconf</code> - Generate configuration","text":"<pre><code>melctl s3 genconf &lt;kind&gt; [arguments]\n</code></pre>"},{"location":"plugins/customer/s8s/","title":"S8S","text":"<p>Interacts with LuxProvide's Kubernetes-on-HPC (aka. Slurmenetes aka. S8S) service.</p>"},{"location":"plugins/customer/s8s/#usage","title":"Usage","text":"<pre><code>melctl s8s {set-config,get-config,del-config,list-regions,list-pools,get-pool,status,resources,scale} [arguments]\n</code></pre>"},{"location":"plugins/customer/s8s/#list-regions-list-s8s-regions","title":"<code>list-regions</code> - List S8S regions","text":"<pre><code>melctl s8s list-regions [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>name            kind       description\n--------------  ---------  ------------------------------\nmeluxina-test   slurm      LuxProvide HPC (test cluster)\nlxp-test.cloud  openstack  LuxProvide Cloud (test tenant)\n</code></pre> <p>Example return as YAML:</p> <pre><code>- description: LuxProvide HPC (test cluster)\nkind: slurm\nname: meluxina-test\n- description: LuxProvide Cloud (test tenant)\nkind: openstack\nname: lxp-test.cloud\n</code></pre>"},{"location":"plugins/customer/s8s/#list-pools-list-s8s-pools-in-a-given-region","title":"<code>list-pools</code> - List S8S pools in a given region","text":"<pre><code>melctl s8s list-pools {region} [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>TODO\n</code></pre> <p>Example return as YAML:</p> <pre><code>- TO: DO\n</code></pre>"},{"location":"plugins/customer/s8s/#get-pool-get-a-specific-pool-information","title":"<code>get-pool</code> - Get a specific pool information","text":"<pre><code>melctl s8s get-pool {region} {pool} [arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>TODO\n</code></pre> <p>Example return as YAML:</p> <pre><code>- TO: DO\n</code></pre>"},{"location":"plugins/customer/s8s/#scale-manually-scale-a-k8ss8s-cluster","title":"<code>scale</code> - Manually scale a K8S/S8S cluster","text":"<pre><code>melctl s8s scale {region} {pool} {master_node_url}\n--token {master_node_token}\n[ --cpu:{cpu_nodes_count }:{cpu_nodes_seconds }]\n[ --gpu:{gpu_nodes_count }:{gpu_nodes_seconds }]\n[ --mem:{mem_nodes_count }:{mem_nodes_seconds }]\n[--fpga:{fpga_nodes_count}:{fpga_nodes_seconds}]\n[arguments]\n</code></pre> <p>Example return as table:</p> <pre><code>TODO\n</code></pre> <p>Example return as YAML:</p> <pre><code>- TO: DO\n</code></pre>"},{"location":"plugins/customer/s8s/#tutorial","title":"Tutorial","text":"<p>S8S is used to scale an existing compatible Kubernetes cluster on MeluXina HPC.</p>"},{"location":"plugins/customer/s8s/#obtaining-a-compatible-k8s-cluster","title":"Obtaining a compatible K8S cluster","text":"<p>Please contact LuxProvide.</p>"},{"location":"plugins/customer/s8s/#obtaining-a-cluster-token","title":"Obtaining a cluster token","text":"<p>Once a cluster is created, you'll receive a join token; This token will be used to scale your cluster on MeluXina HPC.</p>"},{"location":"plugins/customer/s8s/#setting-up-a-configuration","title":"Setting-up a configuration","text":"<p>Optional</p> <p>Setting-up a configuration is not mandatory, but recommend as is simplifies other operations.</p> <p>Configuration update</p> <p>A configuration can be updated by re-creating it. Use <code>melctl s8s get-config --token</code> to list the existing configuration(s) with the token before updating / recreating a configuration.</p> <p>Prerequisites:</p> <ul> <li>Region name (should be <code>meluxina</code>, or use the value instructed by LuxProvide)</li> <li>Pool name (should be your project ID, e.g. <code>p200XYZ)</code>)</li> <li>Master URL (given by LuxProvide)</li> <li>Join token (given by LuxProvide)</li> </ul> <p>Command:</p> <pre><code>melctl s8s set-config ${config_name} \\\n--region ${region_name} \\\n--pool ${pool_name} \\\n--master ${master_url} \\\n--token ${join_token}\n</code></pre> <p>Example:</p> <pre><code>melctl s8s set-config default \\\n--region meluxina \\\n--pool p200001 \\\n--master \"https://s8s.p200001.cloud.lxp.lu:6443\" \\\n--token \"*****\"\n</code></pre>"},{"location":"plugins/customer/s8s/#list-available-resources","title":"List available resources","text":"<p><code>melctl s8s resources</code> returns the available resources for a given region.</p> <p>Procedure with a pre-existing configuration:</p> <pre><code>melctl s8s resources ${config_name}\n</code></pre> <p>Procedure without configuration:</p> <pre><code>melctl s8s resources --region ${region_name}\n</code></pre>"},{"location":"plugins/customer/s8s/#scale-a-cluster","title":"Scale a cluster","text":"<p><code>melctl s8s scale</code> scales a cluster according to the provided specifications.</p> <p>Specifications are defined as follow:</p> <ul> <li>The node type argument: <code>--cpu</code>, <code>--gpu</code>, <code>--mem</code>, <code>--fpga</code></li> <li>The two-part value: <code>{nodes_count}:{time_seconds}</code><ul> <li>The nodes count value: a number &gt; 0</li> <li>The allocation time value: a number &gt; 0</li> </ul> </li> </ul> <p>Multiple specifications may be provided.</p> <p>Procedure with a pre-existing configuration:</p> <pre><code>melctl s8s scale ${config_name}\n--${node_type} ${nodes_count}:${time_seconds} # ...\n</code></pre> <p>Procedure without configuration:</p> <pre><code>melctl s8s scale \\\n--region ${region_name}\n--pool ${pool_name} \\\n--master ${master_url} \\\n--token ${join_token} \\\n--${node_type} ${nodes_count}:${time_seconds} # ...\n</code></pre> <p>Example with a pre-existing configuration:</p> <pre><code>melctl s8s scale default\n    --cpu \"1:1800\" \\\n--cpu \"2:3600\" \\\n--gpu \"2:3600\"\n</code></pre> <p>Example without configuration:</p> <pre><code>melctl s8s scale \\\n--region ${region_name}\n--pool ${pool_name} \\\n--master ${master_url} \\\n--token ${join_token} \\\n--cpu \"1:1800\" \\\n--cpu \"2:3600\" \\\n--gpu \"2:3600\"\n</code></pre>"},{"location":"plugins/customer/s8s/#check-status-with-melctl","title":"Check status with <code>melctl</code>","text":"<p><code>melctl s8s status</code> reports the status of an S8S allocation.</p> <p>Procedure with a pre-existing configuration:</p> <pre><code>melctl s8s status ${config_name}\n</code></pre> <p>Procedure without configuration:</p> <pre><code>melctl s8s scale \\\n--region ${region_name}\n--pool ${pool_name} \\\n--master ${master_url} \\\n--token ${join_token} \\\n--${node_type} ${nodes_count}:${time_seconds} # ...\n</code></pre>"},{"location":"plugins/customer/s8s/#check-status-with-kubectl","title":"Check status with <code>kubectl</code>","text":"<p><code>kubectl get nodes</code> lists the cluster's nodes.</p>"},{"location":"plugins/customer/s8s/#cleanup","title":"Cleanup","text":"<p>The allocated Kubernetes nodes are stopped automatically by MelCtl. However, the Kubernetes cluster should be informed manually that the nodes have been removed.</p> <p>Run <code>kubectl delete node ${node_name}</code> to remove a de-allocated node.</p>"}]}